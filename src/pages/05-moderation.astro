---
import { Image } from '@unpic/astro';
import { db, Upload } from 'astro:db';
import Layout from '../layouts/default.astro';

// Cloudinary stuff
import { v2 as cloudinary, type TransformationOptions } from 'cloudinary';

cloudinary.config({
	cloud_name: import.meta.env.CLOUDINARY_CLOUD_NAME,
	api_key: import.meta.env.CLOUDINARY_API_KEY,
	api_secret: import.meta.env.CLOUDINARY_API_SECRET,
});

// https://github.com/cloudinary-community/cloudinary-examples/blob/main/examples/astro-form-upload/src/pages/upload.astro
const uploadStream = async (buffer: Uint8Array) => {
	return new Promise((resolve, reject) => {
		cloudinary.uploader
			.upload_stream(
				{
					folder: 'cloudinary-images',

					// use auto-captioning to get alt text for user uploads
					detection: 'captioning',

					// add moderation in case bad actors decide to be weirdos
					moderation: 'aws_rek:suggestive:ignore',
				},
				(error, result) => {
					if (error) return reject(error);
					resolve(result);
				},
			)
			// @ts-expect-error https://github.com/cloudinary/cloudinary_npm/issues/663
			.end(buffer);
	});
};

let uploadedFile: any | undefined;
let moderationStatus;
let alt;

if (Astro.request.method === 'POST') {
	const data = await Astro.request.formData();

	const file = data.get('file') as File;

	const arrayBuffer = await file.arrayBuffer();
	const uint8Array = new Uint8Array(arrayBuffer);

	uploadedFile = await uploadStream(uint8Array);
}

if (uploadedFile && uploadedFile.public_id) {
	alt = uploadedFile.info?.detection?.captioning?.data?.caption ?? '';

	moderationStatus = uploadedFile.moderation.at(0).status;

	if (moderationStatus === 'approved') {
		await db.insert(Upload).values({ public_id: uploadedFile.public_id, alt });
	}
}

const uploads = await db.select().from(Upload);
const gallery = uploads.map((upload) => {
	const src = cloudinary.url(upload.public_id, {
		transformation: [
			{ quality: 'auto', format: 'auto' },
			{ crop: 'thumb', gravity: 'face:auto' },
		],
	});

	return { src, alt: upload.alt };
});
---

<Layout>
	<h1>05. Moderation</h1>

	{
		moderationStatus === 'rejected' ? (
			<div class="error">
				<p>
					The uploaded image was flagged as potentially inappropriate. Please
					try another image.
				</p>
			</div>
		) : null
	}

	<form method="post" enctype="multipart/form-data" class="upload">
		<label for="file">Upload your photo:</label>
		<input type="file" name="file" id="file" required />
		<button>Submit</button>
	</form>

	<div class="uploads">
		{
			gallery.map(({ src, alt }) => (
				<div class="image">
					<Image
						src={src}
						alt={alt}
						height={300}
						aspectRatio={1}
						class="thumb"
					/>
				</div>
			))
		}
	</div>

	{
		uploadedFile ? (
			<pre style="max-width: 100vw">
				{JSON.stringify(uploadedFile, null, 2)}
			</pre>
		) : null
	}
</Layout>

<style>
	.error {
		background: color-mix(in oklch, red, var(--bg) 92%);
		border: 1px solid red;
		border-radius: 0.25rem;
		padding: 1.5rem;
		text-align: center;
		width: 100cqi;

		& p {
			margin: 0;
		}
	}

	.uploads {
		display: flex;
		flex-wrap: wrap;
		gap: 3rem;
		justify-content: center;
	}

	.image {
		border: 1px solid color-mix(in oklch, var(--orange-600), transparent 60%);
		border-radius: 0.5rem;
		max-inline-size: 150px;
		padding: 1.5rem;
	}
</style>
